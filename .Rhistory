#7)
is.numeric(mydata$Zip)
mydata$Zip=as.numeric(mydata$Zip) #missing data stored as NA
mean(mydata$Zip, na.rm=TRUE) #48210047
#8)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
# check through each sub-sbring in b, changes Expends2002$CommsInDescrip[i] to TRUE if any sub-string in b[i]
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$Descrip[1]
b[[1]][2]
#b)
mydata$Filerid=substr(mydata$CRPFilerid, start=2, stop=9)
as.factor(mydata$Filerid) #2246 levels
#c)
mydata$Zip_four=substr(mydata$Zip, start=1, stop=4)
max(table(mydata$Zip_four)) #2000 is the most common (1561 occurences)
#d)
as.character(mydata$Descrip)
mydata$boolean = grepl("Communications|communications|COMMUNICATIONS", mydata$Descrip)
table(mydata$boolean) #9 TRUE values
#e)
mydata$new_variable<-substr(mydata$CRPFilerid, 1, 1) == "N" | (mydata$Amount>500 & !is.na(mydata$Descrip))
table(mydata$new_variable) # 12456 TRUE values
Expends2002 <- read_csv("~/Downloads/Expends2002.txt")
View(Expends2002)
mydata=Expends2002
is.data.frame(mydata)
#2)
colnames(mydata)[3]="Useless"
View(mydata)
#3)
mydata$Useless=NULL
mydata$Source=NULL
#4)
mydata$EntType=factor(mydata$EntType) #7 levels
is.factor(mydata$EntType)
#5)
mydata$State=factor(mydata$State)
levels(mydata$State) # ("AS", "LL", "St", "ZZ")
## ZZ is Virginia, St is Florida, LL is Iowa, AS is Arizona (2 are American Samoa)
mydata$State[mydata$State=="ZZ"]<-"VI"
mydata$State[mydata$State=="AS" & mydata$Zip==853640574]<-"AZ"
mydata$State[mydata$State=="LL"]<-"IA"
mydata$State[mydata$State=="St"]<-"FL"
#6)
clean_data<-mydata[!is.na(mydata$State),]
View(clean_data)
#7)
is.numeric(mydata$Zip)
mydata$Zip=as.numeric(mydata$Zip) #missing data stored as NA
mean(mydata$Zip, na.rm=TRUE) #48210047
#8)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
# check through each sub-sbring in b, changes Expends2002$CommsInDescrip[i] to TRUE if any sub-string in b[i]
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$Descrip[1]
b[[1]][2]
#b)
mydata$Filerid=substr(mydata$CRPFilerid, start=2, stop=9)
as.factor(mydata$Filerid) #2246 levels
#c)
mydata$Zip_four=substr(mydata$Zip, start=1, stop=4)
max(table(mydata$Zip_four)) #2000 is the most common (1561 occurences)
#d)
as.character(mydata$Descrip)
mydata$boolean = grepl("Communications|communications|COMMUNICATIONS", mydata$Descrip)
table(mydata$boolean) #9 TRUE values
#e)
mydata$new_variable<-substr(mydata$CRPFilerid, 1, 1) == "N" | (mydata$Amount>500 & !is.na(mydata$Descrip))
table(mydata$new_variable) # 12456 TRUE values
library(readr)
Expends2002 <- read_csv("~/Downloads/Expends2002.txt")
View(Expends2002)
mydata=Expends2002
is.data.frame(mydata)
colnames(mydata)[3]="Useless"
View(mydata)
#3)
mydata$Useless=NULL
mydata$Source=NULL
#4)
mydata$EntType=factor(mydata$EntType) #7 levels
is.factor(mydata$EntType)
#5)
mydata$State=factor(mydata$State)
levels(mydata$State) # ("AS", "LL", "St", "ZZ")
## ZZ is Virginia, St is Florida, LL is Iowa, AS is Arizona (2 are American Samoa)
mydata$State[mydata$State=="ZZ"]<-"VI"
mydata$State[mydata$State=="AS" & mydata$Zip==853640574]<-"AZ"
mydata$State[mydata$State=="LL"]<-"IA"
mydata$State[mydata$State=="St"]<-"FL"
#6)
clean_data<-mydata[!is.na(mydata$State),]
View(clean_data)
#7)
is.numeric(mydata$Zip)
mydata$Zip=as.numeric(mydata$Zip) #missing data stored as NA
mean(mydata$Zip, na.rm=TRUE) #48210047
#8)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
# check through each sub-sbring in b, changes Expends2002$CommsInDescrip[i] to TRUE if any sub-string in b[i]
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$Descrip[1]
b[[1]][2]
#b)
mydata$Filerid=substr(mydata$CRPFilerid, start=2, stop=9)
as.factor(mydata$Filerid) #2246 levels
#c)
mydata$Zip_four=substr(mydata$Zip, start=1, stop=4)
max(table(mydata$Zip_four)) #2000 is the most common (1561 occurences)
#d)
as.character(mydata$Descrip)
mydata$boolean = grepl("Communications|communications|COMMUNICATIONS", mydata$Descrip)
table(mydata$boolean) #9 TRUE values
#e)
mydata$new_variable<-substr(mydata$CRPFilerid, 1, 1) == "N" | (mydata$Amount>500 & !is.na(mydata$Descrip))
table(mydata$new_variable) # 12456 TRUE values
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub(' ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$ID)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
View(mydata)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$ID)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$word.length[i]<-length(b[[i]])
}
}
View(Expends2002)
install.packages("doMC")
library(doMC)
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecasts"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput(inputId = "forecast",
label = "Choose a forecast:",
choices = c("Campbell", "Lewis-Beck", "EWT2C2", "Fair", "Hibbs", "Abramowitz")),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of elections to display:",
value = 15
),
# Include clarifying text ----
helpText("Here are the results from presidential forecasts from 1952-2008")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("view"),
plotOutput("plot", click = "plot_click"),
verbatimTextOutput("info")
)
)
)
server <- function(input, output) {
library(EBMAforecast)
data("presidentialForecast")
forecastInput <- reactive({
switch(input$forecast,
"Campbell" = presidentialForecast$Campbell,
"Lewis-Beck" = presidentialForecast$`Lewis-Beck`,
"EWT2C2" = presidentialForecast$EWT2C2,
"Fair" = presidentialForecast$Fair,
"Hibbs" = presidentialForecast$Hibbs,
"Abramowitz" = presidentialForecast$Abramowitz)
})
output$plot <- renderPlot({
input$newplot
plot(x = 1:15, y = presidentialForecast$Actual, main = "Election Results by Indexed Election Year",
xlab = "Indexed Election Year 1952-2008", ylab = "Election Results", col = 12, type = "l")
lines(x = 1:15, y = forecastInput())
})
datasetInput <- reactive({
presidentialForecast
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
# App title ----
titlePanel("Presidential Forecasts"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput(inputId = "forecast",
label = "Choose a forecast:",
choices = c("Campbell", "Lewis-Beck", "EWT2C2", "Fair", "Hibbs", "Abramowitz")),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of elections to display:",
value = 15
),
# Include clarifying text ----
helpText("Here are the results from presidential forecasts from 1952-2008")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("view"),
plotOutput("plot", click = "plot_click"),
verbatimTextOutput("info")
)
)
)
server <- function(input, output) {
library(EBMAforecast)
data("presidentialForecast")
forecastInput <- reactive({
switch(input$forecast,
"Campbell" = presidentialForecast$Campbell,
"Lewis-Beck" = presidentialForecast$`Lewis-Beck`,
"EWT2C2" = presidentialForecast$EWT2C2,
"Fair" = presidentialForecast$Fair,
"Hibbs" = presidentialForecast$Hibbs,
"Abramowitz" = presidentialForecast$Abramowitz)
})
output$plot <- renderPlot({
input$newplot
plot(x = 1:15, y = presidentialForecast$Actual, main = "Election Results by Indexed Election Year",
xlab = "Indexed Election Year 1952-2008", ylab = "Election Results", col = 12, type = "l")
lines(x = 1:15, y = forecastInput())
})
datasetInput <- reactive({
presidentialForecast
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)
})
}
shinyApp(ui = ui, server = server)
vote_data = read.delim("votingdata.dat") # Read in dataset from .dat file
setwd("/Users/kalendavison/Desktop/Applied Statistical Programming/GitHub/Gaussian")
vote_data = read.delim("votingdata.dat") # Read in dataset from .dat file
vote_data = na.exclude(vote_data) # Remove all entries with missing data
vote_data <- vote_data[!(vote_data$stt==12),] # Removal of Hawaii entry from dataset
vote_data$stt <- ifelse(vote_data$stt > 12, vote_data$stt - 1, vote_data$stt)
vote_data$stt <- ifelse(vote_data$stt > 2, vote_data$stt - 1, vote_data$stt) # Recode stt value for states alphabetically after AK
state_data = vote_data[vote_data$stt == state_numbers, c(1,2,3,6,7)]
sample_data = state_data[sample(1:length(state_data$stt), sample_n),]
sample_data = unique(sample_data[,c("stt", "eth", "sex", "edu")])
View(vote_data)
sample_selector = function(state_numbers, sample_n, plots){
vote_data = read.delim("votingdata.dat") # Read in dataset from .dat file
vote_data = na.exclude(vote_data) # Remove all entries with missing data
vote_data <- vote_data[!(vote_data$stt==12),] # Removal of Hawaii entry from dataset
vote_data$stt <- ifelse(vote_data$stt > 12, vote_data$stt - 1, vote_data$stt)
vote_data$stt <- ifelse(vote_data$stt > 2, vote_data$stt - 1, vote_data$stt) # Recode stt value for states alphabetically after AK
#creating sample_data based upon sample_n and state_numbers
state_data = vote_data[vote_data$stt == state_numbers, c(1,2,3,6,7)]
sample_data = state_data[sample(1:length(state_data$stt), sample_n),]
sample_data = unique(sample_data[,c("stt", "eth", "sex", "edu")])
#run gp function with state, sex, education, and ethnicity on state_data
gp_output<-gp(formula = rvote~rbf(columns = c("stt", "sex", "edu", "eth"), l = c(1, 1.7, .2, 2.9)), data = state_data, family = binomial)
gp<-predict(gp_output, sample_data, type="response") #predict from sample_data
state_data$stt = as.factor(state_data$stt)
state_data$eth = as.factor(state_data$eth)
state_data$sex = as.factor(state_data$sex)
state_data$edu = as.factor(state_data$edu)
#run glmer function with state, sex, education, and ethnicity on state_data
glmer_output = glmer(formula = rvote ~ (1|stt) + (1|eth) + (1|sex) + (1|edu), data = state_data, family = binomial)
glmer = predict(glmer_output, newdata = sample_data, type="response") #predict from sample_data
predictions_table <- data.frame(sample_data, glmer, gp)
predictions_table$difference =  predictions_table$glmer - as.vector(predictions_table$gp) #make differences column
jpeg("withAA")
if (plots == 1){
par(mfrow=c(2,2))
#Plot illustrating prediction differences by ethnicity
plot(seq(from = 0, to = 1, by = .05), seq(from = 0, to = 1, by = .05), xlab = "GP", ylab = "Glmer", type = "n",
main = "Predictions compared by Ethnicity")
points(predictions_table$gp[predictions_table$eth == 1], predictions_table$glmer[predictions_table$eth == 1], col = "red", pch = 19)
abline(lm(predictions_table$glmer[predictions_table$eth == 1] ~ predictions_table$gp[predictions_table$eth == 1]), col="red")
points(predictions_table$gp[predictions_table$eth == 2], predictions_table$glmer[predictions_table$eth == 2], col = "yellow", pch = 19)
abline(lm(predictions_table$glmer[predictions_table$eth == 2] ~ predictions_table$gp[predictions_table$eth == 2]), col="yellow")
points(predictions_table$gp[predictions_table$eth == 3], predictions_table$glmer[predictions_table$eth == 3], col = "green", pch = 19)
abline(lm(predictions_table$glmer[predictions_table$eth == 3] ~ predictions_table$gp[predictions_table$eth == 3]), col="green")
points(predictions_table$gp[predictions_table$eth == 4], predictions_table$glmer[predictions_table$eth == 4], col = "black", pch = 19)
abline(lm(predictions_table$glmer[predictions_table$eth == 4] ~ predictions_table$gp[predictions_table$eth == 4]), col="black")
legend("topleft", c("White","Black","Hispanic","Asian/Pacific Islander"), bty="y", pt.bg=c("red","yellow","green","black"),
col=c("red","yellow","green","black"), pch = c(21,21), cex = 0.6)
fit<-lm(predictions_table$glmer ~ predictions_table$gp)
abline(fit, col="blue")
#Plot illustrating prediction differences by sex
plot(seq(from = 0, to = 1, by = .05), seq(from = 0, to = 1, by = .05), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Sex")
points(predictions_table$gp[predictions_table$sex == 1], predictions_table$glmer[predictions_table$sex == 1], col = "blue", pch = 19)
abline(lm(predictions_table$glmer[predictions_table$sex==1] ~ predictions_table$gp[predictions_table$sex==1]), col="blue")
points(predictions_table$gp[predictions_table$sex == 2], predictions_table$glmer[predictions_table$sex == 2], col = "pink", pch = 19)
abline(lm(predictions_table$glmer[predictions_table$sex==2] ~ predictions_table$gp[predictions_table$sex==2]), col="pink")
legend("topleft", c("Male","Female"), bty="y", pt.bg=c("blue","pink"),
col=c("blue","pink"), pch = c(21,21), cex = 0.75)
#Plot illustrating prediction differences by education level
plot(seq(from = 0, to = 1, by = .05), seq(from = 0, to = 1, by = .05), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Education")
points(predictions_table$gp[predictions_table$edu == 1], predictions_table$glmer[predictions_table$edu == 1], col = "purple", pch = 19)
abline(lm(predictions_table$glmer[predictions_table$edu==1] ~ predictions_table$gp[predictions_table$edu==1]), col="purple")
points(predictions_table$gp[predictions_table$edu == 2], predictions_table$glmer[predictions_table$edu == 2], col = "blue", pch = 19)
abline(lm(predictions_table$glmer[predictions_table$edu==2] ~ predictions_table$gp[predictions_table$edu==2]), col="blue")
points(predictions_table$gp[predictions_table$edu == 3], predictions_table$glmer[predictions_table$edu == 3], col = "green", pch = 19)
abline(lm(predictions_table$glmer[predictions_table$edu==3] ~ predictions_table$gp[predictions_table$edu==3]), col="green")
points(predictions_table$gp[predictions_table$edu == 4], predictions_table$glmer[predictions_table$edu == 4], col = "yellow", pch = 19)
abline(lm(predictions_table$glmer[predictions_table$edu==4] ~ predictions_table$gp[predictions_table$edu==4]), col="yellow")
points(predictions_table$gp[predictions_table$edu == 5], predictions_table$glmer[predictions_table$edu == 5], col = "red", pch = 19)
abline(lm(predictions_table$glmer[predictions_table$edu==5] ~ predictions_table$gp[predictions_table$edu==5]), col="red")
legend("topleft", c("No HS","HS Graduate","Some College","College Graduate","Advanced Degree"), bty="y", pt.bg=c("purple","blue","green","yellow","red"),
col=c("purple","blue","green","yellow","red"), pch = c(21,21), cex = 0.6)
#Plot illustrating difference between gp and glmer by glmer predictions
plot(seq(from = 0, to = 1, by = .05), seq(from = -.5, to = .5, by = .05), main = "Glmer vs. Difference in Predictions", xlab ="Glmer", ylab ="Difference", type = "n")
points(predictions_table$glmer[predictions_table$eth == 2], predictions_table$difference[predictions_table$eth == 2], col = "yellow", pch = 16)
points(predictions_table$glmer[predictions_table$eth != 2], predictions_table$difference[predictions_table$eth != 2], col = "black", pch = 16)
abline(a=0, b=0, col = "black", lwd = 2)
legend("topleft", c("African American","Not African American"), bty="y", pt.bg=c("yellow", "black"),
col=c("yellow","black"), pch = c(21,21), cex = 0.5)
fit<-lm(predictions_table$glmer ~ predictions_table$gp) #add lbf to above plot
dev.off()
print(fit$coefficients[[2]]) #return overall regression coefficent
return(predictions_table)
}
else {
return(predictions_table)
}
}
sample_selector(state_numbers = c(1,2,3,5,6,7), sample_n = 500, plots = 1)
library(devtools)
library(arm)
library(gpe)
library(lme4)
sample_selector(state_numbers = c(2,4,20), sample_n = 500, plots = 1)
sample_selector(state_numbers = c(1,2,3,5,6,7), sample_n = 500, plots = 1)
