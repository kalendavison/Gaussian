for(j in 1:length(levels(temp.table$temp))){
for(i in 1:9){
if(as.numeric(levels(temp.table$temp)[j])==i){
out[i] <- freq[j] - log10(1+1/i)
}
}
}
return((out))
}
method(input)
max(method(input))
input <- c(rnorm(100, 80, 10))
method <- function(input){
temp <- as.numeric(substr(input, 1, 1))
temp.table <- as.data.frame(table(temp))
freq <- temp.table$Freq/sum(temp.table$Freq)
out <- numeric()
for(j in 1:length(levels(temp.table$temp))){
for(i in 1:9){
if(as.numeric(levels(temp.table$temp)[j])==i){
out[i] <- freq[j] - log10(1+1/i)
}
}
}
return((out))
}
max(method(input))
input <- c(rnorm(100, 80, 10))
method <- function(input){
temp <- as.numeric(substr(input, 1, 1))
temp.table <- as.data.frame(table(temp))
freq <- temp.table$Freq/sum(temp.table$Freq)
out <- numeric()
for(j in 1:length(levels(temp.table$temp))){
for(i in 1:9){
if(as.numeric(levels(temp.table$temp)[j])==i){
out[i] <- freq[j] - log10(1+1/i)
}
}
}
return((out))
}
(method(input))
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
rm()
rm(Election08)
rm(newhamp)
rm(USJudgeRatings)
View(Expends2002)
mydata=Expends2002
is.data.frame(mydata)
#2)
colnames(mydata)[3]="Useless"
View(mydata)
#3)
mydata$Useless=NULL
mydata$Source=NULL
#4)
mydata$EntType=factor(mydata$EntType) #7 levels
is.factor(mydata$EntType)
#5)
mydata$State=factor(mydata$State)
levels(mydata$State) # ("AS", "LL", "St", "ZZ")
## ZZ is Virginia, St is Florida, LL is Iowa, AS is Arizona (2 are American Samoa)
mydata$State[mydata$State=="ZZ"]<-"VI"
mydata$State[mydata$State=="AS" & mydata$Zip==853640574]<-"AZ"
mydata$State[mydata$State=="LL"]<-"IA"
mydata$State[mydata$State=="St"]<-"FL"
#6)
clean_data<-mydata[!is.na(mydata$State),]
View(clean_data)
#7)
is.numeric(mydata$Zip)
mydata$Zip=as.numeric(mydata$Zip) #missing data stored as NA
mean(mydata$Zip, na.rm=TRUE) #48210047
#8)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
# check through each sub-sbring in b, changes Expends2002$CommsInDescrip[i] to TRUE if any sub-string in b[i]
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$Descrip[1]
b[[1]][2]
#b)
mydata$Filerid=substr(mydata$CRPFilerid, start=2, stop=9)
as.factor(mydata$Filerid) #2246 levels
#c)
mydata$Zip_four=substr(mydata$Zip, start=1, stop=4)
max(table(mydata$Zip_four)) #2000 is the most common (1561 occurences)
#d)
as.character(mydata$Descrip)
mydata$boolean = grepl("Communications|communications|COMMUNICATIONS", mydata$Descrip)
table(mydata$boolean) #9 TRUE values
#e)
mydata$new_variable<-substr(mydata$CRPFilerid, 1, 1) == "N" | (mydata$Amount>500 & !is.na(mydata$Descrip))
table(mydata$new_variable) # 12456 TRUE values
Expends2002 <- read_csv("~/Downloads/Expends2002.txt")
View(Expends2002)
mydata=Expends2002
is.data.frame(mydata)
#2)
colnames(mydata)[3]="Useless"
View(mydata)
#3)
mydata$Useless=NULL
mydata$Source=NULL
#4)
mydata$EntType=factor(mydata$EntType) #7 levels
is.factor(mydata$EntType)
#5)
mydata$State=factor(mydata$State)
levels(mydata$State) # ("AS", "LL", "St", "ZZ")
## ZZ is Virginia, St is Florida, LL is Iowa, AS is Arizona (2 are American Samoa)
mydata$State[mydata$State=="ZZ"]<-"VI"
mydata$State[mydata$State=="AS" & mydata$Zip==853640574]<-"AZ"
mydata$State[mydata$State=="LL"]<-"IA"
mydata$State[mydata$State=="St"]<-"FL"
#6)
clean_data<-mydata[!is.na(mydata$State),]
View(clean_data)
#7)
is.numeric(mydata$Zip)
mydata$Zip=as.numeric(mydata$Zip) #missing data stored as NA
mean(mydata$Zip, na.rm=TRUE) #48210047
#8)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
# check through each sub-sbring in b, changes Expends2002$CommsInDescrip[i] to TRUE if any sub-string in b[i]
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$Descrip[1]
b[[1]][2]
#b)
mydata$Filerid=substr(mydata$CRPFilerid, start=2, stop=9)
as.factor(mydata$Filerid) #2246 levels
#c)
mydata$Zip_four=substr(mydata$Zip, start=1, stop=4)
max(table(mydata$Zip_four)) #2000 is the most common (1561 occurences)
#d)
as.character(mydata$Descrip)
mydata$boolean = grepl("Communications|communications|COMMUNICATIONS", mydata$Descrip)
table(mydata$boolean) #9 TRUE values
#e)
mydata$new_variable<-substr(mydata$CRPFilerid, 1, 1) == "N" | (mydata$Amount>500 & !is.na(mydata$Descrip))
table(mydata$new_variable) # 12456 TRUE values
library(readr)
Expends2002 <- read_csv("~/Downloads/Expends2002.txt")
View(Expends2002)
mydata=Expends2002
is.data.frame(mydata)
colnames(mydata)[3]="Useless"
View(mydata)
#3)
mydata$Useless=NULL
mydata$Source=NULL
#4)
mydata$EntType=factor(mydata$EntType) #7 levels
is.factor(mydata$EntType)
#5)
mydata$State=factor(mydata$State)
levels(mydata$State) # ("AS", "LL", "St", "ZZ")
## ZZ is Virginia, St is Florida, LL is Iowa, AS is Arizona (2 are American Samoa)
mydata$State[mydata$State=="ZZ"]<-"VI"
mydata$State[mydata$State=="AS" & mydata$Zip==853640574]<-"AZ"
mydata$State[mydata$State=="LL"]<-"IA"
mydata$State[mydata$State=="St"]<-"FL"
#6)
clean_data<-mydata[!is.na(mydata$State),]
View(clean_data)
#7)
is.numeric(mydata$Zip)
mydata$Zip=as.numeric(mydata$Zip) #missing data stored as NA
mean(mydata$Zip, na.rm=TRUE) #48210047
#8)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
# check through each sub-sbring in b, changes Expends2002$CommsInDescrip[i] to TRUE if any sub-string in b[i]
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$Descrip[1]
b[[1]][2]
#b)
mydata$Filerid=substr(mydata$CRPFilerid, start=2, stop=9)
as.factor(mydata$Filerid) #2246 levels
#c)
mydata$Zip_four=substr(mydata$Zip, start=1, stop=4)
max(table(mydata$Zip_four)) #2000 is the most common (1561 occurences)
#d)
as.character(mydata$Descrip)
mydata$boolean = grepl("Communications|communications|COMMUNICATIONS", mydata$Descrip)
table(mydata$boolean) #9 TRUE values
#e)
mydata$new_variable<-substr(mydata$CRPFilerid, 1, 1) == "N" | (mydata$Amount>500 & !is.na(mydata$Descrip))
table(mydata$new_variable) # 12456 TRUE values
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub(' ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$ID)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
View(mydata)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$ID)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$word.length[i]<-length(b[[i]])
}
}
View(Expends2002)
install.packages("doMC")
library(doMC)
check = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3) + (1|var4), data = vote.df.all, family = binomial)
library(devtools)
library(arm)
library(gpe)
library(lme4)
setwd("/Users/kalendavison/Desktop/Applied Statistical Programming/GitHub/Gaussian")
vote_data = read.delim("votingdata.dat") # Read in dataset from .dat file
vote_data = na.exclude(vote_data) # Remove all entries with missing data
check = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3) + (1|var4), data = vote.df.all, family = binomial)
vote_data <- vote_data[!(vote_data$stt==12),] # Removal of Hawaii entry from dataset
vote_data$stt <- ifelse(vote_data$stt > 2, vote_data$stt - 1, vote_data$stt) # Recode stt value for states alphabetically after AK
vote_data$stt <- ifelse(vote_data$stt > 12, vote_data$stt - 1, vote_data$stt) # Recode stt values for states alphabetically after HI
state.f<-factor(vote_data$stt)
dummies<-model.matrix(~state.f)
vote_data<-cbind(vote_data, dummies) # Attach dummy matrix to vote_data
vote_data$white<-ifelse(vote_data$eth==1, c(1), c(0))
vote_data$black<-ifelse(vote_data$eth==2, c(1), c(0))
vote_data$hisp<-ifelse(vote_data$eth==3, c(1), c(0))
vote_data$api<-ifelse(vote_data$eth==4, c(1), c(0))
vote_data$male <- ifelse(vote_data$sex==1, c(1), c(0))
vote_data$female <- ifelse(vote_data$sex==2, c(1), c(0))
vote_data$noHS <- ifelse(vote_data$edu==1, c(1), c(0))
vote_data$HSgrad <- ifelse(vote_data$edu==2, c(1), c(0))
vote_data$somecollege <- ifelse(vote_data$edu==3, c(1), c(0))
vote_data$bachelors <- ifelse(vote_data$edu==4, c(1), c(0))
vote_data$adv_degree <- ifelse(vote_data$edu==5, c(1), c(0))
vote_data$mar<-ifelse(vote_data$mar==1, c(1), c(0)) # Recode married to 0 1
vote_data$kid<-ifelse(vote_data$kid==1, c(1), c(0)) # Recode kid to 0 1
votedata23<-subset(vote_data, vote_data$state.f23==1) # Mississippi subset
vote.df23<-as.data.frame(votedata23)
votedata2<-subset(vote_data, vote_data$state.f2==1) # Arizona subset
vote.df2<-as.data.frame(votedata2)
votedata20<-subset(vote_data, vote_data$state.f20==1) # Massachusetts subset
vote.df20<-as.data.frame(votedata20)
vote.df<-as.data.frame(vote_data) # Full dataset cast as dataframe
check = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3) + (1|var4), data = vote.df.all, family = binomial)
vote.df.all<-vote.df[,c("rvote", "eth", "sex", "edu", "stt")]
var1 = vote.df.all$eth
var1 = as.factor(var1)
var2 = vote.df.all$sex
var2 = as.factor(var2)
var3 = vote.df.all$edu
var3 = as.factor(var3)
var4 = vote.df.all$stt
var4 = as.factor(var4)
check = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3) + (1|var4), data = vote.df.all, family = binomial)
check
glmer_predictions = predict(check, newdata = vote.df.all, type="response")
glmer_predictions = as.data.frame(table(glmer_predictions)) #creates a frequency column to match with gp later
glmer_predictions = glmer_predictions[order(glmer_predictions$Freq),] #order data frame by frequency
glmer_predictions
table(vote_data$stt)
glmer_predictions
glmer_predictions = predict(check, newdata = vote.df.all, type="response")
glmer_predictions = as.data.frame(table(glmer_predictions)) #creates a frequency column to match with gp later
glmer_predictions
output_mass<-gp(formula = rvote~rbf(c("sex", "edu", "eth")), data = vote.df20, family = binomial)
print(output_mass)
output_miss<-gp(formula = rvote~rbf(c("sex", "edu", "eth")), data = vote.df23, family = binomial)
output_miss
data(VADeaths)
rm(list = ls())
data(VADeaths)
VADeaths # look at the data
barplot(VADeaths, # specify the dataset
beside = T, # put the bars next to eachother.  What happens when this is FALSE?
legend = T, # Include a legend
ylim=c(0,90), # the the range of the y-axis that will be plotted
ylab="Deaths per 1000", # Label the y-axis
main = "Death rates in Virginia")# put a title on the main
webData<-url("http://pages.wustl.edu/montgomery/incumbents2.txt")
OOS <- read.table(webData)
attach(OOS)
VoteShare<-t(matrix(by(voteshare, list(year, chalquality), mean, na.rm=TRUE)
, ncol=2))
VoteShare # Vote share by year and challenger quality
rownames(VoteShare)<-c("Inexperienced", "Experienced")
colnames(VoteShare)<-unique(year)
barplot(VoteShare, beside=T, legend=T, ylim=c(0,.90))
VoteShare.early<-VoteShare[,1:10]
dotchart(VoteShare.early,
xlim=c(0,.90), # The limits for the x-axis
xlab="Share of two-party vote",
main="It's good to draw a bad challenger",
pch = 19) # this controls the kind of point that is plotted
VoteShare.late<-VoteShare[,11:20]
my.dot.plotter<-function(){ # i'm making this a function so I don't have to copy and paste below
dotchart(VoteShare.early,
xlim=c(.4,.7), # The limits for the x-axis
xlab="Share of two-party vote",
main="1956-1972",
pch = 19) # this controls the kind of point that is plotted
dotchart(VoteShare.late,
xlim=c(.4,.7), # The limits for the x-axis
xlab="Share of two-party vote",
main="1974-1994",
pch = 19) # this controls the kind of point that is plotted
}
par(mfrow=c(1,2))# The par() function controls the basic graphic parameters in R
?par
my.dot.plotter()
par(mfrow=c(1,2), mar=c(2,2,2,1))# The mar( ) option controls the margins of the internal plot
?par # let's find the mar option
my.dot.plotter()
par(mfrow=c(1,1)) # resetting back to just one kind.  Alternatively, you could just close the device
hist(voteshare)
hist(voteshare, breaks = "SCOTT") # we can change how many "bins" the plot makes
hist(voteshare, breaks = "Freedman-Diaconis")
hist(voteshare, breaks = 20) # or we can set it manually
par(mfrow=c(1,1)) # resetting back to just one kind.  Alternatively, you could just close the device
hist(voteshare)
hist(voteshare, breaks = "SCOTT") # we can change how many "bins" the plot makes
hist(voteshare, breaks = "Freedman-Diaconis")
hist(voteshare, breaks = 20) # or we can set it manually
plot(density(voteshare, na.rm=TRUE)) #
rug(voteshare)
hist(voteshare*100, probability=TRUE, ylim=c(0,.04)
, main = "Incumbent Share of two-party vote"
, xlab="Vote Share")
lines(density(voteshare*100, na.rm=TRUE), lty=2)
rug(voteshare*100)
hist(voteshare*100, probability=TRUE, ylim=c(0,.04)
, main = "Incumbent Share of two-party vote", xlab="Vote Share")
high.quality.y<-density(voteshare[chalquality==1]*100, na.rm=TRUE)$y*mean(chalquality, na.rm=TRUE)
high.quality.x<-density(voteshare[chalquality==1]*100, na.rm=TRUE)$x
high.quality.x
low.quality.y<-density(voteshare[chalquality==0]*100, na.rm=TRUE)$y*mean(chalquality, na.rm=TRUE)
low.quality.x<-density(voteshare[chalquality==0]*100, na.rm=TRUE)$x
lines(high.quality.x, high.quality.y, lty=2, col="red")
lines(low.quality.x, low.quality.y, lty=3, col="blue")
lines(density(voteshare*100, na.rm=TRUE), lty=1) # lines will add a line to an exiting plot.  lty=2 specifies a dashed line
col1 <- rgb(1, 0, 0, alpha=.05)
col2 <- rgb(0, 0, 1, alpha=.05)
rug(voteshare[chalquality==1]*100, col=col1)
rug(voteshare[chalquality==0]*100, col=col2)
plot(NULL)
plot(x= 0:5, y=5:0, xlab = "Luke's Hair Length", ylab = "Luke's attitude", main = "Luke is Mean")
