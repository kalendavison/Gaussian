#4)
mydata$EntType=factor(mydata$EntType) #7 levels
is.factor(mydata$EntType)
#5)
mydata$State=factor(mydata$State)
levels(mydata$State) # ("AS", "LL", "St", "ZZ")
## ZZ is Virginia, St is Florida, LL is Iowa, AS is Arizona (2 are American Samoa)
mydata$State[mydata$State=="ZZ"]<-"VI"
mydata$State[mydata$State=="AS" & mydata$Zip==853640574]<-"AZ"
mydata$State[mydata$State=="LL"]<-"IA"
mydata$State[mydata$State=="St"]<-"FL"
#6)
clean_data<-mydata[!is.na(mydata$State),]
View(clean_data)
#7)
is.numeric(mydata$Zip)
mydata$Zip=as.numeric(mydata$Zip) #missing data stored as NA
mean(mydata$Zip, na.rm=TRUE) #48210047
#8)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
# check through each sub-sbring in b, changes Expends2002$CommsInDescrip[i] to TRUE if any sub-string in b[i]
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$Descrip[1]
b[[1]][2]
#b)
mydata$Filerid=substr(mydata$CRPFilerid, start=2, stop=9)
as.factor(mydata$Filerid) #2246 levels
#c)
mydata$Zip_four=substr(mydata$Zip, start=1, stop=4)
max(table(mydata$Zip_four)) #2000 is the most common (1561 occurences)
#d)
as.character(mydata$Descrip)
mydata$boolean = grepl("Communications|communications|COMMUNICATIONS", mydata$Descrip)
table(mydata$boolean) #9 TRUE values
#e)
mydata$new_variable<-substr(mydata$CRPFilerid, 1, 1) == "N" | (mydata$Amount>500 & !is.na(mydata$Descrip))
table(mydata$new_variable) # 12456 TRUE values
library(readr)
Expends2002 <- read_csv("~/Downloads/Expends2002.txt")
View(Expends2002)
mydata=Expends2002
is.data.frame(mydata)
colnames(mydata)[3]="Useless"
View(mydata)
#3)
mydata$Useless=NULL
mydata$Source=NULL
#4)
mydata$EntType=factor(mydata$EntType) #7 levels
is.factor(mydata$EntType)
#5)
mydata$State=factor(mydata$State)
levels(mydata$State) # ("AS", "LL", "St", "ZZ")
## ZZ is Virginia, St is Florida, LL is Iowa, AS is Arizona (2 are American Samoa)
mydata$State[mydata$State=="ZZ"]<-"VI"
mydata$State[mydata$State=="AS" & mydata$Zip==853640574]<-"AZ"
mydata$State[mydata$State=="LL"]<-"IA"
mydata$State[mydata$State=="St"]<-"FL"
#6)
clean_data<-mydata[!is.na(mydata$State),]
View(clean_data)
#7)
is.numeric(mydata$Zip)
mydata$Zip=as.numeric(mydata$Zip) #missing data stored as NA
mean(mydata$Zip, na.rm=TRUE) #48210047
#8)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
# check through each sub-sbring in b, changes Expends2002$CommsInDescrip[i] to TRUE if any sub-string in b[i]
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$Descrip[1]
b[[1]][2]
#b)
mydata$Filerid=substr(mydata$CRPFilerid, start=2, stop=9)
as.factor(mydata$Filerid) #2246 levels
#c)
mydata$Zip_four=substr(mydata$Zip, start=1, stop=4)
max(table(mydata$Zip_four)) #2000 is the most common (1561 occurences)
#d)
as.character(mydata$Descrip)
mydata$boolean = grepl("Communications|communications|COMMUNICATIONS", mydata$Descrip)
table(mydata$boolean) #9 TRUE values
#e)
mydata$new_variable<-substr(mydata$CRPFilerid, 1, 1) == "N" | (mydata$Amount>500 & !is.na(mydata$Descrip))
table(mydata$new_variable) # 12456 TRUE values
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub(' ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$ID)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
View(mydata)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$ID)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$word.length[i]<-length(b[[i]])
}
}
View(Expends2002)
install.packages("doMC")
library(doMC)
setwd("/Users/kalendavison/Desktop/Applied Statistical Programming/GitHub/Gaussian")
vote_data = read.delim("votingdata.dat") # Read in dataset from .dat file
vote_data = na.exclude(vote_data) # Remove all entries with missing data
View(vote_data)
vote_data <- vote_data[!(vote_data$stt==12),] # Removal of Hawaii entry from dataset
vote_data$stt <- ifelse(vote_data$stt > 2, vote_data$stt - 1, vote_data$stt) # Recode stt value for states alphabetically after AK
vote_data$stt <- ifelse(vote_data$stt > 12, vote_data$stt - 1, vote_data$stt) # Recode stt values for states alphabetically after HI
state.f<-factor(vote_data$stt)
dummies<-model.matrix(~state.f)
vote_data<-cbind(vote_data, dummies) # Attach dummy matrix to vote_data
vote_data$white<-ifelse(vote_data$eth==1, c(1), c(0))
vote_data$black<-ifelse(vote_data$eth==2, c(1), c(0))
vote_data$hisp<-ifelse(vote_data$eth==3, c(1), c(0))
vote_data$api<-ifelse(vote_data$eth==4, c(1), c(0))
vote_data$male <- ifelse(vote_data$sex==1, c(1), c(0))
vote_data$female <- ifelse(vote_data$sex==2, c(1), c(0))
vote_data$noHS <- ifelse(vote_data$edu==1, c(1), c(0))
vote_data$HSgrad <- ifelse(vote_data$edu==2, c(1), c(0))
vote_data$somecollege <- ifelse(vote_data$edu==3, c(1), c(0))
vote_data$bachelors <- ifelse(vote_data$edu==4, c(1), c(0))
vote_data$adv_degree <- ifelse(vote_data$edu==5, c(1), c(0))
vote_data$mar<-ifelse(vote_data$mar==1, c(1), c(0)) # Recode married to 0 1
vote_data$kid<-ifelse(vote_data$kid==1, c(1), c(0)) # Recode kid to 0 1
votedata23<-subset(vote_data, vote_data$state.f23==1) # Mississippi subset
vote.df23<-as.data.frame(votedata23)
votedata2<-subset(vote_data, vote_data$state.f2==1) # Arizona subset
vote.df2<-as.data.frame(votedata2)
votedata20<-subset(vote_data, vote_data$state.f20==1) # Massachusetts subset
vote.df20<-as.data.frame(votedata20)
vote.df<-as.data.frame(vote_data) # Full dataset cast as dataframe
output_miss<-gp(formula = rvote~rbf(c("sex", "edu", "eth")), data = vote.df23, family = binomial)
library(arm)
library(gpe)
library(devtools)
output_mass<-gp(formula = rvote~rbf(c("sex", "edu", "eth")), data = vote.df20, family = binomial)
output_mass
eth = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10))
sex = c(rep((c(rep(1,5), rep(2,5))), 4))
edu = rep(1:5, 8)
fake.dataset = data.frame(eth, sex, edu) # Cast fake dataset as dataframe
predictions_mass<-predict(output_mass, fake.dataset, type="response")
View(demographic.prediction.MA)
predictions_mass<-predict(output_mass, fake.dataset, type="response")
demographic.prediction.MA = data.frame(predictions_mass, fake.dataset)
View(demographic.prediction.MA)
library(XML)
library(httr)
tables <- GET(ncaaurl)
ncaaurl <- "https://www.ncaa.com/scoreboard/basketball-men/d1/2018/02/24"
tables <- GET(ncaaurl)
allTables <- readHTMLTable(rawToChar(tables$content)) # rawToChar: converts bytes back to string
str(allTables)  # we can see how data is structured
oneGame <- allTables[[3]] # first, let's extract the first table
oneGame
oneGame$School
as.character(oneGame$School)
as.numeric(as.character(oneGame$Score))
scoreExtractor <- function(x){
output<-list()
output$Home.Team<-as.character(x$School[2])
output$Away.Team<-as.character(x$School[1])
output$Home.Score<-as.numeric(as.character(x$Score[2]))
output$Away.Score<-as.numeric(as.character(x$Score[1]))
return(output)
}
scoreExtractor(allTables[[3]])
sapply(allTables, scoreExtractor)
allScores <- t(sapply(allTables, scoreExtractor))
allScores <- as.data.frame(allScores)
rownames(allScores)<-NULL
allScores
class(allScores$Home.Team)
class(allScores$Home.Score)
allScores$Away.Team <- as.character(allScores$Away.Team)
allScores$Home.Team <- as.character(allScores$Home.Team)
allScores$Away.Score <- as.numeric(allScores$Away.Score)
allScores$Home.Score <- as.numeric(allScores$Home.Score)
class(allScores$Home.Team)
class(allScores$Home.Score)
allScores
allScores$Home.Score
plot(allScores$Home.Score, allScores$Away.Score)
abline(a=0, b=1, col="red") # Q. home advantage in basketball?
allScores
allScores$Home.Team <-  gsub('[0-9]+', '', allScores$Home.Team)
allScores$Home.Team
allScores$Home.Team <- gsub('-', '', allScores$Home.Team)
allScores$Away.Team <-  gsub('[0-9]+', '', allScores$Away.Team)
allScores$Away.Team
allScores$Away.Team <- gsub('-', '', allScores$Away.Team)
allScores
oneDayScores <- function(myURL){
tables <- GET(myURL)
allTables <- readHTMLTable(rawToChar(tables$content))
allScores <- t(sapply(allTables, scoreExtractor))
allScores <- as.data.frame(allScores)
rownames(allScores)<-NULL
allScores$Home.Team <- as.character(allScores$Home.Team)
allScores$Away.Team <- as.character(allScores$Away.Team)
allScores$Away.Score <- as.character(allScores$Away.Score)
allScores$Home.Score <- as.character(allScores$Home.Score)
allScores$Home.Team <-  gsub('[0-9]+', '', allScores$Home.Team)
allScores$Home.Team <- gsub('-', '', allScores$Home.Team)
allScores$Away.Team <-  gsub('[0-9]+', '', allScores$Away.Team)
allScores$Away.Team <- gsub('-', '', allScores$Away.Team)
return(allScores)
}
base="http://www.ncaa.com/scoreboard/basketball-men/d1/2018/02/"
base="http://www.ncaa.com/scoreboard/basketball-men/d1/2018/02/"
days<-paste0(base, c(paste0(0, 1:9), 10:27))
days
library(plyr)
allDays <- oneDayScores(days[1])
head(allDays)
for(i in days[2:length(days)]){
print(i)
allDays<-rbind(allDays, oneDayScores(i))
}
allDays
plot(allDays$Home.Score, allDays$Away.Score)
abline(a=0, b=1, col="red")
t.test(allDays$Home.Score, allDays$Away.Score)
rm(list = ls())
library(devtools)
library(arm)
library(gpe)
library(lme4)
setwd("/Users/kalendavison/Desktop/Applied Statistical Programming/GitHub/Gaussian")
vote_data = read.delim("votingdata.dat") # Read in dataset from .dat file
vote_data = na.exclude(vote_data) # Remove all entries with missing data
vote_data <- vote_data[!(vote_data$stt==12),] # Removal of Hawaii entry from dataset
vote_data$stt <- ifelse(vote_data$stt > 2, vote_data$stt - 1, vote_data$stt) # Recode stt value for states alphabetically after AK
vote_data$stt <- ifelse(vote_data$stt > 12, vote_data$stt - 1, vote_data$stt) # Recode stt values for states alphabetically after HI
state.f<-factor(vote_data$stt)
dummies<-model.matrix(~state.f)
vote_data<-cbind(vote_data, dummies) # Attach dummy matrix to vote_data
vote_data$white<-ifelse(vote_data$eth==1, c(1), c(0))
vote_data$black<-ifelse(vote_data$eth==2, c(1), c(0))
vote_data$hisp<-ifelse(vote_data$eth==3, c(1), c(0))
vote_data$api<-ifelse(vote_data$eth==4, c(1), c(0))
vote_data$male <- ifelse(vote_data$sex==1, c(1), c(0))
vote_data$female <- ifelse(vote_data$sex==2, c(1), c(0))
vote_data$noHS <- ifelse(vote_data$edu==1, c(1), c(0))
vote_data$HSgrad <- ifelse(vote_data$edu==2, c(1), c(0))
vote_data$somecollege <- ifelse(vote_data$edu==3, c(1), c(0))
vote_data$bachelors <- ifelse(vote_data$edu==4, c(1), c(0))
vote_data$adv_degree <- ifelse(vote_data$edu==5, c(1), c(0))
vote_data$mar<-ifelse(vote_data$mar==1, c(1), c(0)) # Recode married to 0 1
vote_data$kid<-ifelse(vote_data$kid==1, c(1), c(0)) # Recode kid to 0 1
votedata23<-subset(vote_data, vote_data$state.f23==1) # Mississippi subset
vote.df23<-as.data.frame(votedata23)
votedata2<-subset(vote_data, vote_data$state.f2==1) # Arizona subset
vote.df2<-as.data.frame(votedata2)
votedata20<-subset(vote_data, vote_data$state.f20==1) # Massachusetts subset
vote.df20<-as.data.frame(votedata20)
vote.df<-as.data.frame(vote_data) # Full dataset cast as dataframe
output_miss<-gp(formula = rvote~rbf(c("sex", "edu", "eth")), data = vote.df23, family = binomial)
output_mass<-gp(formula = rvote~rbf(c("sex", "edu", "eth")), data = vote.df20, family = binomial)
eth = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10))
sex = c(rep((c(rep(1,5), rep(2,5))), 4))
edu = rep(1:5, 8)
fake.dataset = data.frame(eth, sex, edu) # Cast fake dataset as dataframe
predictions_miss<-predict(output_miss, fake.dataset, type="response")
predictions_ariz<-predict(output_ariz, fake.dataset, type="response")
predictions_mass<-predict(output_mass, fake.dataset, type="response")
demographic.prediction.MA = data.frame(predictions_mass, fake.dataset)
white <- c(rep(1,10), rep(0,30))
black <- c(rep(0,10), rep(1,10), rep(0,20))
hisp <- c(rep(0,20), rep(1,10), rep(0,10))
api <- c(rep(0,30), rep(1,10))
male <- rep((c(rep(1,5), rep(0,5))), 4)
female <- rep((c(rep(0,5), rep(1,5))), 4)
noHS <- rep(c(1,0,0,0,0),8)
HSgrad <- rep(c(0,1,0,0,0),8)
somecollege <- rep(c(0,0,1,0,0),8)
bachelors <- rep(c(0,0,0,1,0),8)
adv_degree <- rep(c(0,0,0,0,1),8)
fake.dataset.2 = data.frame(white, black, hisp, api, male, female, noHS, HSgrad, somecollege, bachelors, adv_degree)
vote.df20<-vote.df20[,c("rvote", "eth", "sex", "edu")]
var1 = vote.df20$eth
var1 = as.factor(var1)
var2 = vote.df20$sex
var2 = as.factor(var2)
var3 = vote.df20$edu
var3 = as.factor(var3)
check = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3), data = vote.df20, family = binomial)
glmer_predictions = predict(check, newdata = vote.df20, type="response")
glmer_predictions = round(glmer_predictions, digits = 7)
glmer_predictions = as.data.frame(table(glmer_predictions))
check = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3), data = vote.df20, family = binomial)  #run glmer function
display(check)
glmer_predictions = predict(check, newdata = vote.df20, type="response")
glmer_predictions = round(glmer_predictions, digits = 7) #round for aesthetics and clear comparison
glmer_predictions = as.data.frame(table(glmer_predictions)) #creates a frequency column to match with gp later
glmer_predictions = glmer_predictions[order(glmer_predictions$Freq),] #order data frame by frequency
glmer_predictions
gptest = gp(formula = rvote~rbf(c("sex", "edu", "eth")), data = vote.df20, family = binomial)
gp_predictions<-predict(gptest, vote.df20, type="response")
gp_predictions = round(gp_predictions, digits = 7)
gp_predictions = as.data.frame(table(gp_predictions))
gp_predictions = data.frame(gp_predictions)
gp_predictions = gp_predictions[order(gp_predictions$Freq),]
gptest = gp(formula = rvote~rbf(c("sex", "edu", "eth")), data = vote.df20, family = binomial)
gp_predictions<-predict(gptest, vote.df20, type="response") #run gp through whole data set to get frequencies
gp_predictions = round(gp_predictions, digits = 7) #round for clear comparison
gp_predictions = as.data.frame(table(gp_predictions)) #access frequency
gp_predictions<-predict(gptest, vote.df20, type="response") #run gp through whole data set to get frequencies
gp_predictions = round(gp_predictions, digits = 7) #round for clear comparison
gp_predictions = as.data.frame(table(gp_predictions)) #access frequency
gp_predictions = gp_predictions[order(gp_predictions$Freq),] #order by frequency to match with glmer
gp_predictions
ordered = demographic.prediction.MA[order(demographic.prediction.MA$predictions_mass),] #order gp by fake.dataset to later add to master comparison
comparison = data.frame(gp_predictions$gp_predictions, glmer_predictions$glmer_predictions, ordered) #to be cleaned to make sense
comparison = comparison[order(comparison$gp_predictions),] #order by gp_predictions to match methods
comparison$gp_predictions.gp_predictions = NULL #no longer necessary because added predictions_mass
comparison = comparison[order(comparison$glmer_predictions.glmer_predictions),] #reorder
comparison$glmer = comparison$glmer_predictions.glmer_predictions #rename for sense
comparison$glmer_predictions.glmer_predictions = NULL #no longer needed (just renamed)
comparison$gp = comparison$predictions_mass #rename for sense
comparison$predictions_mass = NULL #no longer needed (just renamed)
comparison$glmer = as.vector(comparison$glmer) #change from a factor to numeric for plotting purposes
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), xlab = "GP", ylab = "Glmer", type = "n",
main = "Predictions compared by Ethnicity") #by ethnicity
points(comparison$gp[comparison$eth == 1], comparison$glmer[comparison$eth == 1], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 1] ~ comparison$gp[comparison$eth == 1]), col="red") # slope = 0.09
points(comparison$gp[comparison$eth == 2], comparison$glmer[comparison$eth == 2], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 2] ~ comparison$gp[comparison$eth == 2]), col="yellow") # slope = 0.70
points(comparison$gp[comparison$eth == 3], comparison$glmer[comparison$eth == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 3] ~ comparison$gp[comparison$eth == 3]), col="green") # slope = 0.85
points(comparison$gp[comparison$eth == 4], comparison$glmer[comparison$eth == 4], col = "black", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 4] ~ comparison$gp[comparison$eth == 4]), col="black") # slope = -0.03
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="blue")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Sex") #by sex
points(comparison$gp[comparison$sex == 1], comparison$glmer[comparison$sex == 1], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$sex==1] ~ comparison$gp[comparison$sex==1]), col="blue") # slope = 0.55
points(comparison$gp[comparison$sex == 2], comparison$glmer[comparison$sex == 2], col = "pink", pch = 19)
abline(lm(comparison$glmer[comparison$sex==2] ~ comparison$gp[comparison$sex==2]), col="pink") # slope = 0.91
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Education") #by sex
points(comparison$gp[comparison$edu == 1], comparison$glmer[comparison$edu == 1], col = "purple", pch = 19)
abline(lm(comparison$glmer[comparison$edu==1] ~ comparison$gp[comparison$edu==1]), col="purple") # slope = 0.47
points(comparison$gp[comparison$edu == 2], comparison$glmer[comparison$edu == 2], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$edu==2] ~ comparison$gp[comparison$edu==2]), col="blue") # slope = 0.75
points(comparison$gp[comparison$edu == 3], comparison$glmer[comparison$edu == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$edu==3] ~ comparison$gp[comparison$edu==3]), col="green") # slope = 1.07
points(comparison$gp[comparison$edu == 4], comparison$glmer[comparison$edu == 4], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$edu==4] ~ comparison$gp[comparison$edu==4]), col="yellow") # slope = 0.65
points(comparison$gp[comparison$edu == 5], comparison$glmer[comparison$edu == 5], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$edu==5] ~ comparison$gp[comparison$edu==5]), col="red") # slope = 1.53
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
