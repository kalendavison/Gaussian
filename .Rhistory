sample_data = sample_data[,c("rvote", "eth", "sex", "edu")]
gp_output<-gp(formula = rvote~rbf(columns = c("sex", "edu", "eth"), l = c(.3,.15, 2.5)), data = sample_data, family = binomial)
gp_output<-gp(formula = rvote~rbf(columns = c("sex", "edu", "eth"), l = c(.5, .15, 2)), data = sample_data, family = binomial)
gp_predictions<-predict(gp_output, sample_data, type="response")
eth = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10))
sex = c(rep((c(rep(1,5), rep(2,5))), 4))
edu = rep(1:5, 8)
fake.dataset = data.frame(eth, sex, edu)
gp_predict<-predict(gp_output, fake.dataset, type="response")
demographic.predictions = data.frame(gp_predict, fake.dataset)
gp_predictions = as.data.frame(table(gp_predictions))
gp_predictions = gp_predictions[order(gp_predictions$Freq),]
var1 = sample_data$eth
sample_data$var1 = as.factor(var1)
var2 = sample_data$sex
sample_data$var2 = as.factor(var2)
var3 = sample_data$edu
sample_data$var3 = as.factor(var3)
glmer_output = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3), data = sample_data, family = binomial)
glmer_predictions = predict(glmer_output, newdata = sample_data, type="response")
glmer_predictions = as.data.frame(table(glmer_predictions))
glmer_predictions = glmer_predictions[order(glmer_predictions$Freq),]
ordered = demographic.predictions[order(demographic.predictions$gp_predict),] #order gp by fake.dataset to later add to master comparison
comparison = data.frame(gp_predictions$gp_predictions, glmer_predictions$glmer_predictions, ordered) #to be cleaned to make sense
comparison = comparison[order(comparison$gp_predictions),] #order by gp_predictions to match methods
comparison$gp_predictions.gp_predictions = NULL #no longer necessary because added predictions_mass
comparison = comparison[order(comparison$glmer_predictions.glmer_predictions),] #reorder
comparison$glmer = comparison$glmer_predictions.glmer_predictions #rename for sense
comparison$glmer_predictions.glmer_predictions = NULL #no longer needed (just renamed)
comparison$gp = comparison$gp_predict #rename for sense
comparison$gp_predict = NULL #no longer needed (just renamed)
comparison$glmer = (as.numeric(levels(comparison$glmer))) #change from a factor to numeric for plotting purposes
comparison$difference =  comparison$glmer - as.vector(comparison$gp)
if (plots == 1){
par(mfrow=c(2,2))
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), xlab = "GP", ylab = "Glmer", type = "n",
main = "Predictions compared by Ethnicity") #by ethnicity
points(comparison$gp[comparison$eth == 1], comparison$glmer[comparison$eth == 1], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 1] ~ comparison$gp[comparison$eth == 1]), col="red") # slope = 0.09
points(comparison$gp[comparison$eth == 2], comparison$glmer[comparison$eth == 2], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 2] ~ comparison$gp[comparison$eth == 2]), col="yellow") # slope = 0.70
points(comparison$gp[comparison$eth == 3], comparison$glmer[comparison$eth == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 3] ~ comparison$gp[comparison$eth == 3]), col="green") # slope = 0.85
points(comparison$gp[comparison$eth == 4], comparison$glmer[comparison$eth == 4], col = "black", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 4] ~ comparison$gp[comparison$eth == 4]), col="black") # slope = -0.03
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="blue")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Sex") #by sex
points(comparison$gp[comparison$sex == 1], comparison$glmer[comparison$sex == 1], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$sex==1] ~ comparison$gp[comparison$sex==1]), col="blue") # slope = 0.55
points(comparison$gp[comparison$sex == 2], comparison$glmer[comparison$sex == 2], col = "pink", pch = 19)
abline(lm(comparison$glmer[comparison$sex==2] ~ comparison$gp[comparison$sex==2]), col="pink") # slope = 0.91
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Education") #by sex
points(comparison$gp[comparison$edu == 1], comparison$glmer[comparison$edu == 1], col = "purple", pch = 19)
abline(lm(comparison$glmer[comparison$edu==1] ~ comparison$gp[comparison$edu==1]), col="purple") # slope = 0.47
points(comparison$gp[comparison$edu == 2], comparison$glmer[comparison$edu == 2], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$edu==2] ~ comparison$gp[comparison$edu==2]), col="blue") # slope = 0.75
points(comparison$gp[comparison$edu == 3], comparison$glmer[comparison$edu == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$edu==3] ~ comparison$gp[comparison$edu==3]), col="green") # slope = 1.07
points(comparison$gp[comparison$edu == 4], comparison$glmer[comparison$edu == 4], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$edu==4] ~ comparison$gp[comparison$edu==4]), col="yellow") # slope = 0.65
points(comparison$gp[comparison$edu == 5], comparison$glmer[comparison$edu == 5], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$edu==5] ~ comparison$gp[comparison$edu==5]), col="red") # slope = 1.53
plot(comparison$glmer, comparison$difference, main = "Glmer versus difference in predictions", xlab ="Glmer", ylab ="Difference")
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
print(fit$coefficients[[2]])
return(comparison)
}
else {
return(comparison)
}
}
{
sample_selector = function(state_number, sample_n, plots){
vote_data = read.delim("votingdata.dat") # Read in dataset from .dat file
vote_data = na.exclude(vote_data) # Remove all entries with missing data
vote_data <- vote_data[!(vote_data$stt==12),] # Removal of Hawaii entry from dataset
vote_data$stt <- ifelse(vote_data$stt > 12, vote_data$stt - 1, vote_data$stt)
vote_data$stt <- ifelse(vote_data$stt > 2, vote_data$stt - 1, vote_data$stt) # Recode stt value for states alphabetically after AK
group = vote_data[vote_data$stt == state_number, 1:9]
sample_data = group[sample(1:length(group$stt), sample_n),]
sample_data = sample_data[,c("rvote", "eth", "sex", "edu")]
gp_output<-gp(formula = rvote~rbf(columns = c("sex", "edu", "eth"), l = c(.1,.4, 4)), data = sample_data, family = binomial)
gp_predictions<-predict(gp_output, sample_data, type="response")
eth = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10))
sex = c(rep((c(rep(1,5), rep(2,5))), 4))
edu = rep(1:5, 8)
fake.dataset = data.frame(eth, sex, edu)
gp_predict<-predict(gp_output, fake.dataset, type="response")
demographic.predictions = data.frame(gp_predict, fake.dataset)
gp_predictions = as.data.frame(table(gp_predictions))
gp_predictions = gp_predictions[order(gp_predictions$Freq),]
var1 = sample_data$eth
sample_data$var1 = as.factor(var1)
var2 = sample_data$sex
sample_data$var2 = as.factor(var2)
var3 = sample_data$edu
sample_data$var3 = as.factor(var3)
glmer_output = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3), data = sample_data, family = binomial)
glmer_predictions = predict(glmer_output, newdata = sample_data, type="response")
glmer_predictions = as.data.frame(table(glmer_predictions))
glmer_predictions = glmer_predictions[order(glmer_predictions$Freq),]
ordered = demographic.predictions[order(demographic.predictions$gp_predict),] #order gp by fake.dataset to later add to master comparison
comparison = data.frame(gp_predictions$gp_predictions, glmer_predictions$glmer_predictions, ordered) #to be cleaned to make sense
comparison = comparison[order(comparison$gp_predictions),] #order by gp_predictions to match methods
comparison$gp_predictions.gp_predictions = NULL #no longer necessary because added predictions_mass
comparison = comparison[order(comparison$glmer_predictions.glmer_predictions),] #reorder
comparison$glmer = comparison$glmer_predictions.glmer_predictions #rename for sense
comparison$glmer_predictions.glmer_predictions = NULL #no longer needed (just renamed)
comparison$gp = comparison$gp_predict #rename for sense
comparison$gp_predict = NULL #no longer needed (just renamed)
comparison$glmer = (as.numeric(levels(comparison$glmer))) #change from a factor to numeric for plotting purposes
comparison$difference =  comparison$glmer - as.vector(comparison$gp)
if (plots == 1){
par(mfrow=c(2,2))
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), xlab = "GP", ylab = "Glmer", type = "n",
main = "Predictions compared by Ethnicity") #by ethnicity
points(comparison$gp[comparison$eth == 1], comparison$glmer[comparison$eth == 1], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 1] ~ comparison$gp[comparison$eth == 1]), col="red") # slope = 0.09
points(comparison$gp[comparison$eth == 2], comparison$glmer[comparison$eth == 2], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 2] ~ comparison$gp[comparison$eth == 2]), col="yellow") # slope = 0.70
points(comparison$gp[comparison$eth == 3], comparison$glmer[comparison$eth == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 3] ~ comparison$gp[comparison$eth == 3]), col="green") # slope = 0.85
points(comparison$gp[comparison$eth == 4], comparison$glmer[comparison$eth == 4], col = "black", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 4] ~ comparison$gp[comparison$eth == 4]), col="black") # slope = -0.03
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="blue")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Sex") #by sex
points(comparison$gp[comparison$sex == 1], comparison$glmer[comparison$sex == 1], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$sex==1] ~ comparison$gp[comparison$sex==1]), col="blue") # slope = 0.55
points(comparison$gp[comparison$sex == 2], comparison$glmer[comparison$sex == 2], col = "pink", pch = 19)
abline(lm(comparison$glmer[comparison$sex==2] ~ comparison$gp[comparison$sex==2]), col="pink") # slope = 0.91
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Education") #by sex
points(comparison$gp[comparison$edu == 1], comparison$glmer[comparison$edu == 1], col = "purple", pch = 19)
abline(lm(comparison$glmer[comparison$edu==1] ~ comparison$gp[comparison$edu==1]), col="purple") # slope = 0.47
points(comparison$gp[comparison$edu == 2], comparison$glmer[comparison$edu == 2], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$edu==2] ~ comparison$gp[comparison$edu==2]), col="blue") # slope = 0.75
points(comparison$gp[comparison$edu == 3], comparison$glmer[comparison$edu == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$edu==3] ~ comparison$gp[comparison$edu==3]), col="green") # slope = 1.07
points(comparison$gp[comparison$edu == 4], comparison$glmer[comparison$edu == 4], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$edu==4] ~ comparison$gp[comparison$edu==4]), col="yellow") # slope = 0.65
points(comparison$gp[comparison$edu == 5], comparison$glmer[comparison$edu == 5], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$edu==5] ~ comparison$gp[comparison$edu==5]), col="red") # slope = 1.53
plot(comparison$glmer, comparison$difference, main = "Glmer versus difference in predictions", xlab ="Glmer", ylab ="Difference")
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
print(fit$coefficients[[2]])
return(comparison)
}
else {
return(comparison)
}
}
d
3+
=
sample_selector = function(state_number, sample_n, plots){
vote_data = read.delim("votingdata.dat") # Read in dataset from .dat file
vote_data = na.exclude(vote_data) # Remove all entries with missing data
vote_data <- vote_data[!(vote_data$stt==12),] # Removal of Hawaii entry from dataset
vote_data$stt <- ifelse(vote_data$stt > 12, vote_data$stt - 1, vote_data$stt)
vote_data$stt <- ifelse(vote_data$stt > 2, vote_data$stt - 1, vote_data$stt) # Recode stt value for states alphabetically after AK
group = vote_data[vote_data$stt == state_number, 1:9]
sample_data = group[sample(1:length(group$stt), sample_n),]
sample_data = sample_data[,c("rvote", "eth", "sex", "edu")]
gp_output<-gp(formula = rvote~rbf(columns = c("sex", "edu", "eth"), l = c(.1,.4, 4)), data = sample_data, family = binomial)
gp_predictions<-predict(gp_output, sample_data, type="response")
eth = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10))
sex = c(rep((c(rep(1,5), rep(2,5))), 4))
edu = rep(1:5, 8)
fake.dataset = data.frame(eth, sex, edu)
gp_predict<-predict(gp_output, fake.dataset, type="response")
demographic.predictions = data.frame(gp_predict, fake.dataset)
gp_predictions = as.data.frame(table(gp_predictions))
gp_predictions = gp_predictions[order(gp_predictions$Freq),]
var1 = sample_data$eth
sample_data$var1 = as.factor(var1)
var2 = sample_data$sex
sample_data$var2 = as.factor(var2)
var3 = sample_data$edu
sample_data$var3 = as.factor(var3)
glmer_output = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3), data = sample_data, family = binomial)
glmer_predictions = predict(glmer_output, newdata = sample_data, type="response")
glmer_predictions = as.data.frame(table(glmer_predictions))
glmer_predictions = glmer_predictions[order(glmer_predictions$Freq),]
ordered = demographic.predictions[order(demographic.predictions$gp_predict),] #order gp by fake.dataset to later add to master comparison
comparison = data.frame(gp_predictions$gp_predictions, glmer_predictions$glmer_predictions, ordered) #to be cleaned to make sense
comparison = comparison[order(comparison$gp_predictions),] #order by gp_predictions to match methods
comparison$gp_predictions.gp_predictions = NULL #no longer necessary because added predictions_mass
comparison = comparison[order(comparison$glmer_predictions.glmer_predictions),] #reorder
comparison$glmer = comparison$glmer_predictions.glmer_predictions #rename for sense
comparison$glmer_predictions.glmer_predictions = NULL #no longer needed (just renamed)
comparison$gp = comparison$gp_predict #rename for sense
comparison$gp_predict = NULL #no longer needed (just renamed)
comparison$glmer = (as.numeric(levels(comparison$glmer))) #change from a factor to numeric for plotting purposes
comparison$difference =  comparison$glmer - as.vector(comparison$gp)
if (plots == 1){
par(mfrow=c(2,2))
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), xlab = "GP", ylab = "Glmer", type = "n",
main = "Predictions compared by Ethnicity") #by ethnicity
points(comparison$gp[comparison$eth == 1], comparison$glmer[comparison$eth == 1], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 1] ~ comparison$gp[comparison$eth == 1]), col="red") # slope = 0.09
points(comparison$gp[comparison$eth == 2], comparison$glmer[comparison$eth == 2], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 2] ~ comparison$gp[comparison$eth == 2]), col="yellow") # slope = 0.70
points(comparison$gp[comparison$eth == 3], comparison$glmer[comparison$eth == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 3] ~ comparison$gp[comparison$eth == 3]), col="green") # slope = 0.85
points(comparison$gp[comparison$eth == 4], comparison$glmer[comparison$eth == 4], col = "black", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 4] ~ comparison$gp[comparison$eth == 4]), col="black") # slope = -0.03
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="blue")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Sex") #by sex
points(comparison$gp[comparison$sex == 1], comparison$glmer[comparison$sex == 1], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$sex==1] ~ comparison$gp[comparison$sex==1]), col="blue") # slope = 0.55
points(comparison$gp[comparison$sex == 2], comparison$glmer[comparison$sex == 2], col = "pink", pch = 19)
abline(lm(comparison$glmer[comparison$sex==2] ~ comparison$gp[comparison$sex==2]), col="pink") # slope = 0.91
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Education") #by sex
points(comparison$gp[comparison$edu == 1], comparison$glmer[comparison$edu == 1], col = "purple", pch = 19)
abline(lm(comparison$glmer[comparison$edu==1] ~ comparison$gp[comparison$edu==1]), col="purple") # slope = 0.47
points(comparison$gp[comparison$edu == 2], comparison$glmer[comparison$edu == 2], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$edu==2] ~ comparison$gp[comparison$edu==2]), col="blue") # slope = 0.75
points(comparison$gp[comparison$edu == 3], comparison$glmer[comparison$edu == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$edu==3] ~ comparison$gp[comparison$edu==3]), col="green") # slope = 1.07
points(comparison$gp[comparison$edu == 4], comparison$glmer[comparison$edu == 4], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$edu==4] ~ comparison$gp[comparison$edu==4]), col="yellow") # slope = 0.65
points(comparison$gp[comparison$edu == 5], comparison$glmer[comparison$edu == 5], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$edu==5] ~ comparison$gp[comparison$edu==5]), col="red") # slope = 1.53
plot(comparison$glmer, comparison$difference, main = "Glmer versus difference in predictions", xlab ="Glmer", ylab ="Difference")
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
print(fit$coefficients[[2]])
return(comparison)
}
else {
return(comparison)
}
}
sample_selector(state_number = 20, sample_n = 2000, plots = 0) #Mass without plots
library(devtools)
library(arm)
library(gpe)
library(lme4)
sample_selector(state_number = 20, sample_n = 2000, plots = 1) #Mass with plots, returns regression coefficient
sample_selector = function(state_number, sample_n, plots){
vote_data = read.delim("votingdata.dat") # Read in dataset from .dat file
vote_data = na.exclude(vote_data) # Remove all entries with missing data
vote_data <- vote_data[!(vote_data$stt==12),] # Removal of Hawaii entry from dataset
vote_data$stt <- ifelse(vote_data$stt > 12, vote_data$stt - 1, vote_data$stt)
vote_data$stt <- ifelse(vote_data$stt > 2, vote_data$stt - 1, vote_data$stt) # Recode stt value for states alphabetically after AK
group = vote_data[vote_data$stt == state_number, 1:9]
sample_data = group[sample(1:length(group$stt), sample_n),]
sample_data = sample_data[,c("rvote", "eth", "sex", "edu")]
gp_output<-gp(formula = rvote~rbf(columns = c("sex", "edu", "eth"), l = c(.05,.05, 7)), data = sample_data, family = binomial)
gp_predictions<-predict(gp_output, sample_data, type="response")
eth = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10))
sex = c(rep((c(rep(1,5), rep(2,5))), 4))
edu = rep(1:5, 8)
fake.dataset = data.frame(eth, sex, edu)
gp_predict<-predict(gp_output, fake.dataset, type="response")
demographic.predictions = data.frame(gp_predict, fake.dataset)
gp_predictions = as.data.frame(table(gp_predictions))
gp_predictions = gp_predictions[order(gp_predictions$Freq),]
var1 = sample_data$eth
sample_data$var1 = as.factor(var1)
var2 = sample_data$sex
sample_data$var2 = as.factor(var2)
var3 = sample_data$edu
sample_data$var3 = as.factor(var3)
glmer_output = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3), data = sample_data, family = binomial)
glmer_predictions = predict(glmer_output, newdata = sample_data, type="response")
glmer_predictions = as.data.frame(table(glmer_predictions))
glmer_predictions = glmer_predictions[order(glmer_predictions$Freq),]
ordered = demographic.predictions[order(demographic.predictions$gp_predict),] #order gp by fake.dataset to later add to master comparison
comparison = data.frame(gp_predictions$gp_predictions, glmer_predictions$glmer_predictions, ordered) #to be cleaned to make sense
comparison = comparison[order(comparison$gp_predictions),] #order by gp_predictions to match methods
comparison$gp_predictions.gp_predictions = NULL #no longer necessary because added predictions_mass
comparison = comparison[order(comparison$glmer_predictions.glmer_predictions),] #reorder
comparison$glmer = comparison$glmer_predictions.glmer_predictions #rename for sense
comparison$glmer_predictions.glmer_predictions = NULL #no longer needed (just renamed)
comparison$gp = comparison$gp_predict #rename for sense
comparison$gp_predict = NULL #no longer needed (just renamed)
comparison$glmer = (as.numeric(levels(comparison$glmer))) #change from a factor to numeric for plotting purposes
comparison$difference =  comparison$glmer - as.vector(comparison$gp)
if (plots == 1){
par(mfrow=c(2,2))
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), xlab = "GP", ylab = "Glmer", type = "n",
main = "Predictions compared by Ethnicity") #by ethnicity
points(comparison$gp[comparison$eth == 1], comparison$glmer[comparison$eth == 1], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 1] ~ comparison$gp[comparison$eth == 1]), col="red") # slope = 0.09
points(comparison$gp[comparison$eth == 2], comparison$glmer[comparison$eth == 2], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 2] ~ comparison$gp[comparison$eth == 2]), col="yellow") # slope = 0.70
points(comparison$gp[comparison$eth == 3], comparison$glmer[comparison$eth == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 3] ~ comparison$gp[comparison$eth == 3]), col="green") # slope = 0.85
points(comparison$gp[comparison$eth == 4], comparison$glmer[comparison$eth == 4], col = "black", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 4] ~ comparison$gp[comparison$eth == 4]), col="black") # slope = -0.03
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="blue")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Sex") #by sex
points(comparison$gp[comparison$sex == 1], comparison$glmer[comparison$sex == 1], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$sex==1] ~ comparison$gp[comparison$sex==1]), col="blue") # slope = 0.55
points(comparison$gp[comparison$sex == 2], comparison$glmer[comparison$sex == 2], col = "pink", pch = 19)
abline(lm(comparison$glmer[comparison$sex==2] ~ comparison$gp[comparison$sex==2]), col="pink") # slope = 0.91
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Education") #by sex
points(comparison$gp[comparison$edu == 1], comparison$glmer[comparison$edu == 1], col = "purple", pch = 19)
abline(lm(comparison$glmer[comparison$edu==1] ~ comparison$gp[comparison$edu==1]), col="purple") # slope = 0.47
points(comparison$gp[comparison$edu == 2], comparison$glmer[comparison$edu == 2], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$edu==2] ~ comparison$gp[comparison$edu==2]), col="blue") # slope = 0.75
points(comparison$gp[comparison$edu == 3], comparison$glmer[comparison$edu == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$edu==3] ~ comparison$gp[comparison$edu==3]), col="green") # slope = 1.07
points(comparison$gp[comparison$edu == 4], comparison$glmer[comparison$edu == 4], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$edu==4] ~ comparison$gp[comparison$edu==4]), col="yellow") # slope = 0.65
points(comparison$gp[comparison$edu == 5], comparison$glmer[comparison$edu == 5], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$edu==5] ~ comparison$gp[comparison$edu==5]), col="red") # slope = 1.53
plot(comparison$glmer, comparison$difference, main = "Glmer versus difference in predictions", xlab ="Glmer", ylab ="Difference")
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
print(fit$coefficients[[2]])
return(comparison)
}
else {
return(comparison)
}
}
sample_selector(state_number = 20, sample_n = 2000, plots = 1) #Mass with plots, returns regression coefficient
sample_selector = function(state_number, sample_n, plots){
vote_data = read.delim("votingdata.dat") # Read in dataset from .dat file
vote_data = na.exclude(vote_data) # Remove all entries with missing data
vote_data <- vote_data[!(vote_data$stt==12),] # Removal of Hawaii entry from dataset
vote_data$stt <- ifelse(vote_data$stt > 12, vote_data$stt - 1, vote_data$stt)
vote_data$stt <- ifelse(vote_data$stt > 2, vote_data$stt - 1, vote_data$stt) # Recode stt value for states alphabetically after AK
group = vote_data[vote_data$stt == state_number, 1:9]
sample_data = group[sample(1:length(group$stt), sample_n),]
sample_data = sample_data[,c("rvote", "eth", "sex", "edu")]
gp_output<-gp(formula = rvote~rbf(columns = c("sex", "edu", "eth"), l = c(3,.05, .05)), data = sample_data, family = binomial)
gp_predictions<-predict(gp_output, sample_data, type="response")
eth = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10))
sex = c(rep((c(rep(1,5), rep(2,5))), 4))
edu = rep(1:5, 8)
fake.dataset = data.frame(eth, sex, edu)
gp_predict<-predict(gp_output, fake.dataset, type="response")
demographic.predictions = data.frame(gp_predict, fake.dataset)
gp_predictions = as.data.frame(table(gp_predictions))
gp_predictions = gp_predictions[order(gp_predictions$Freq),]
var1 = sample_data$eth
sample_data$var1 = as.factor(var1)
var2 = sample_data$sex
sample_data$var2 = as.factor(var2)
var3 = sample_data$edu
sample_data$var3 = as.factor(var3)
glmer_output = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3), data = sample_data, family = binomial)
glmer_predictions = predict(glmer_output, newdata = sample_data, type="response")
glmer_predictions = as.data.frame(table(glmer_predictions))
glmer_predictions = glmer_predictions[order(glmer_predictions$Freq),]
ordered = demographic.predictions[order(demographic.predictions$gp_predict),] #order gp by fake.dataset to later add to master comparison
comparison = data.frame(gp_predictions$gp_predictions, glmer_predictions$glmer_predictions, ordered) #to be cleaned to make sense
comparison = comparison[order(comparison$gp_predictions),] #order by gp_predictions to match methods
comparison$gp_predictions.gp_predictions = NULL #no longer necessary because added predictions_mass
comparison = comparison[order(comparison$glmer_predictions.glmer_predictions),] #reorder
comparison$glmer = comparison$glmer_predictions.glmer_predictions #rename for sense
comparison$glmer_predictions.glmer_predictions = NULL #no longer needed (just renamed)
comparison$gp = comparison$gp_predict #rename for sense
comparison$gp_predict = NULL #no longer needed (just renamed)
comparison$glmer = (as.numeric(levels(comparison$glmer))) #change from a factor to numeric for plotting purposes
comparison$difference =  comparison$glmer - as.vector(comparison$gp)
if (plots == 1){
par(mfrow=c(2,2))
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), xlab = "GP", ylab = "Glmer", type = "n",
main = "Predictions compared by Ethnicity") #by ethnicity
points(comparison$gp[comparison$eth == 1], comparison$glmer[comparison$eth == 1], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 1] ~ comparison$gp[comparison$eth == 1]), col="red") # slope = 0.09
points(comparison$gp[comparison$eth == 2], comparison$glmer[comparison$eth == 2], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 2] ~ comparison$gp[comparison$eth == 2]), col="yellow") # slope = 0.70
points(comparison$gp[comparison$eth == 3], comparison$glmer[comparison$eth == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 3] ~ comparison$gp[comparison$eth == 3]), col="green") # slope = 0.85
points(comparison$gp[comparison$eth == 4], comparison$glmer[comparison$eth == 4], col = "black", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 4] ~ comparison$gp[comparison$eth == 4]), col="black") # slope = -0.03
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="blue")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Sex") #by sex
points(comparison$gp[comparison$sex == 1], comparison$glmer[comparison$sex == 1], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$sex==1] ~ comparison$gp[comparison$sex==1]), col="blue") # slope = 0.55
points(comparison$gp[comparison$sex == 2], comparison$glmer[comparison$sex == 2], col = "pink", pch = 19)
abline(lm(comparison$glmer[comparison$sex==2] ~ comparison$gp[comparison$sex==2]), col="pink") # slope = 0.91
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Education") #by sex
points(comparison$gp[comparison$edu == 1], comparison$glmer[comparison$edu == 1], col = "purple", pch = 19)
abline(lm(comparison$glmer[comparison$edu==1] ~ comparison$gp[comparison$edu==1]), col="purple") # slope = 0.47
points(comparison$gp[comparison$edu == 2], comparison$glmer[comparison$edu == 2], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$edu==2] ~ comparison$gp[comparison$edu==2]), col="blue") # slope = 0.75
points(comparison$gp[comparison$edu == 3], comparison$glmer[comparison$edu == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$edu==3] ~ comparison$gp[comparison$edu==3]), col="green") # slope = 1.07
points(comparison$gp[comparison$edu == 4], comparison$glmer[comparison$edu == 4], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$edu==4] ~ comparison$gp[comparison$edu==4]), col="yellow") # slope = 0.65
points(comparison$gp[comparison$edu == 5], comparison$glmer[comparison$edu == 5], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$edu==5] ~ comparison$gp[comparison$edu==5]), col="red") # slope = 1.53
plot(comparison$glmer, comparison$difference, main = "Glmer versus difference in predictions", xlab ="Glmer", ylab ="Difference")
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
print(fit$coefficients[[2]])
return(comparison)
}
else {
return(comparison)
}
}
sample_selector(state_number = 20, sample_n = 2000, plots = 1) #Mass with plots, returns regression coefficient
sample_selector = function(state_number, sample_n, plots){
vote_data = read.delim("votingdata.dat") # Read in dataset from .dat file
vote_data = na.exclude(vote_data) # Remove all entries with missing data
vote_data <- vote_data[!(vote_data$stt==12),] # Removal of Hawaii entry from dataset
vote_data$stt <- ifelse(vote_data$stt > 12, vote_data$stt - 1, vote_data$stt)
vote_data$stt <- ifelse(vote_data$stt > 2, vote_data$stt - 1, vote_data$stt) # Recode stt value for states alphabetically after AK
group = vote_data[vote_data$stt == state_number, 1:9]
sample_data = group[sample(1:length(group$stt), sample_n),]
sample_data = sample_data[,c("rvote", "eth", "sex", "edu")]
gp_output<-gp(formula = rvote~rbf(columns = c("sex", "edu", "eth"), l = c(1.7, .2, 2.9)), data = sample_data, family = binomial)
gp_predictions<-predict(gp_output, sample_data, type="response")
eth = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10))
sex = c(rep((c(rep(1,5), rep(2,5))), 4))
edu = rep(1:5, 8)
fake.dataset = data.frame(eth, sex, edu)
gp_predict<-predict(gp_output, fake.dataset, type="response")
demographic.predictions = data.frame(gp_predict, fake.dataset)
gp_predictions = as.data.frame(table(gp_predictions))
gp_predictions = gp_predictions[order(gp_predictions$Freq),]
var1 = sample_data$eth
sample_data$var1 = as.factor(var1)
var2 = sample_data$sex
sample_data$var2 = as.factor(var2)
var3 = sample_data$edu
sample_data$var3 = as.factor(var3)
glmer_output = glmer(formula = rvote ~ (1|var1) + (1|var2) + (1|var3), data = sample_data, family = binomial)
glmer_predictions = predict(glmer_output, newdata = sample_data, type="response")
glmer_predictions = as.data.frame(table(glmer_predictions))
glmer_predictions = glmer_predictions[order(glmer_predictions$Freq),]
ordered = demographic.predictions[order(demographic.predictions$gp_predict),] #order gp by fake.dataset to later add to master comparison
comparison = data.frame(gp_predictions$gp_predictions, glmer_predictions$glmer_predictions, ordered) #to be cleaned to make sense
comparison = comparison[order(comparison$gp_predictions),] #order by gp_predictions to match methods
comparison$gp_predictions.gp_predictions = NULL #no longer necessary because added predictions_mass
comparison = comparison[order(comparison$glmer_predictions.glmer_predictions),] #reorder
comparison$glmer = comparison$glmer_predictions.glmer_predictions #rename for sense
comparison$glmer_predictions.glmer_predictions = NULL #no longer needed (just renamed)
comparison$gp = comparison$gp_predict #rename for sense
comparison$gp_predict = NULL #no longer needed (just renamed)
comparison$glmer = (as.numeric(levels(comparison$glmer))) #change from a factor to numeric for plotting purposes
comparison$difference =  comparison$glmer - as.vector(comparison$gp)
if (plots == 1){
par(mfrow=c(2,2))
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), xlab = "GP", ylab = "Glmer", type = "n",
main = "Predictions compared by Ethnicity") #by ethnicity
points(comparison$gp[comparison$eth == 1], comparison$glmer[comparison$eth == 1], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 1] ~ comparison$gp[comparison$eth == 1]), col="red") # slope = 0.09
points(comparison$gp[comparison$eth == 2], comparison$glmer[comparison$eth == 2], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 2] ~ comparison$gp[comparison$eth == 2]), col="yellow") # slope = 0.70
points(comparison$gp[comparison$eth == 3], comparison$glmer[comparison$eth == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 3] ~ comparison$gp[comparison$eth == 3]), col="green") # slope = 0.85
points(comparison$gp[comparison$eth == 4], comparison$glmer[comparison$eth == 4], col = "black", pch = 19)
abline(lm(comparison$glmer[comparison$eth == 4] ~ comparison$gp[comparison$eth == 4]), col="black") # slope = -0.03
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="blue")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Sex") #by sex
points(comparison$gp[comparison$sex == 1], comparison$glmer[comparison$sex == 1], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$sex==1] ~ comparison$gp[comparison$sex==1]), col="blue") # slope = 0.55
points(comparison$gp[comparison$sex == 2], comparison$glmer[comparison$sex == 2], col = "pink", pch = 19)
abline(lm(comparison$glmer[comparison$sex==2] ~ comparison$gp[comparison$sex==2]), col="pink") # slope = 0.91
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
plot(seq(from = 0, to = .5, by = .0125), seq(from = 0, to = .5, by = .0125), type = "n", xlab= "GP", ylab = "Glmer",
main = "Predictions compared by Education") #by sex
points(comparison$gp[comparison$edu == 1], comparison$glmer[comparison$edu == 1], col = "purple", pch = 19)
abline(lm(comparison$glmer[comparison$edu==1] ~ comparison$gp[comparison$edu==1]), col="purple") # slope = 0.47
points(comparison$gp[comparison$edu == 2], comparison$glmer[comparison$edu == 2], col = "blue", pch = 19)
abline(lm(comparison$glmer[comparison$edu==2] ~ comparison$gp[comparison$edu==2]), col="blue") # slope = 0.75
points(comparison$gp[comparison$edu == 3], comparison$glmer[comparison$edu == 3], col = "green", pch = 19)
abline(lm(comparison$glmer[comparison$edu==3] ~ comparison$gp[comparison$edu==3]), col="green") # slope = 1.07
points(comparison$gp[comparison$edu == 4], comparison$glmer[comparison$edu == 4], col = "yellow", pch = 19)
abline(lm(comparison$glmer[comparison$edu==4] ~ comparison$gp[comparison$edu==4]), col="yellow") # slope = 0.65
points(comparison$gp[comparison$edu == 5], comparison$glmer[comparison$edu == 5], col = "red", pch = 19)
abline(lm(comparison$glmer[comparison$edu==5] ~ comparison$gp[comparison$edu==5]), col="red") # slope = 1.53
plot(comparison$glmer, comparison$difference, main = "Glmer versus difference in predictions", xlab ="Glmer", ylab ="Difference")
fit<-lm(comparison$glmer ~ comparison$gp) #slope = 0.73
abline(fit, col="black")
print(fit$coefficients[[2]])
return(comparison)
}
else {
return(comparison)
}
}
sample_selector(state_number = 20, sample_n = 2000, plots = 1) #Mass with plots, returns regression coefficient
sample_selector(state_number = 2, sample_n = 1700, plots = 1) #Arizona with plots
sample_selector(state_number = 4, sample_n = 1950, plots = 1) #california with plots
